# -*- coding: utf-8 -*-
"""11_IF4307_1301190358

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16jXVIEy4tjtPUdyUWZ4LVsrm68qRFPnD


Nisa Maulia Azahra			1301194136

"""

# Import file csv
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from google.colab import files
uploaded = files.upload()

import io 
data= pd.read_csv(io.StringIO(uploaded['restoran.csv'].decode('utf-8')))

# Read data
pelayanan = pd.DataFrame(data, columns = ['pelayanan'])
pelayanan = pelayanan.to_numpy().flatten()
makanan = pd.DataFrame(data, columns = ['makanan'])
makanan = makanan.to_numpy().flatten()

# Aturan untuk Penilaian pelayanan
 
def pelayanan_buruk(x):
    if (1 <= x <= 45):
        return 1
    if (45 < x <= 65):
        return -(x-65)/(65-45)
    else:
        return 0

def pelayanan_biasa(x):
    if (55 < x < 75):
        return (x-55)/(75-55)
    if (75 <= x <= 85):
        return 1
    if (85 < x <= 90):
        return -(x-90)/(90-85)
    else:
        return 0

def pelayanan_baik(x):
    if (85 < x < 90):
        return (x-85)/(85-90)
    if (90 <= x):
        return 1
    else:
        return 0

# Aturan untuk penilaian Makanan
    
def makanan_takenak(x):
    if (1 <= x <= 4):
        return 1
    if (4 < x <= 6):
        return -(x-6)/(6-4)
    else:
        return 0
    
def makanan_biasa(x):
    if (4 < x < 5):
        return (x-4)/(5-4)
    if (5 <= x <= 6):
        return 1
    if (6 < x <= 7):
        return -(x-7)/(7-6)
    else:
        return 0
    
def makanan_enak(x):
    if (6 < x < 9):
        return (x-6)/(9-6)
    if (9 <= x):
        return 1
    else:
        return 0

# Fuzzifikasi

predikat_pelayanan = []
for pelayanan_temp in pelayanan:
    predikat_pelayanan_temp = pelayanan_buruk(pelayanan_temp), pelayanan_biasa(pelayanan_temp), pelayanan_baik(pelayanan_temp)
    predikat_pelayanan.append(predikat_pelayanan_temp)
    
predikat_makanan = []
for makanan_temp in makanan:
    predikat_makanan_temp = makanan_takenak(makanan_temp), makanan_biasa(makanan_temp), makanan_enak(makanan_temp)
    predikat_makanan.append(predikat_makanan_temp)

# Aturan untuk Inferensi

def rules_inferensi(predikat_pelayanan, predikat_makanan):
    pelayanan_buruk, pelayanan_biasa, pelayanan_baik = predikat_pelayanan
    makanan_takenak, makanan_biasa, makanan_enak = predikat_makanan
    
    bawah, atas = [], []
    if (pelayanan_buruk and makanan_takenak):
        bawah.append(min(pelayanan_buruk, makanan_takenak))
    if (pelayanan_buruk and makanan_biasa):
        bawah.append(min(pelayanan_buruk, makanan_biasa))
    if (pelayanan_buruk and makanan_enak):
        bawah.append(min(pelayanan_buruk, makanan_enak))

    if (pelayanan_biasa and makanan_takenak):
        bawah.append(min(pelayanan_biasa, makanan_takenak))
    if (pelayanan_biasa and makanan_biasa):
        atas.append(min(pelayanan_biasa, makanan_biasa))
    if (pelayanan_biasa and makanan_enak):
        atas.append(min(pelayanan_biasa, makanan_enak))
    
    if (pelayanan_baik and makanan_takenak):
        bawah.append(min(pelayanan_baik, makanan_takenak))
    if (pelayanan_baik and makanan_biasa):
        atas.append(min(pelayanan_baik, makanan_biasa))
    if (pelayanan_baik and makanan_enak):
        atas.append(min(pelayanan_baik, makanan_enak))
        
        
    if not atas:
        atas = [0]*len(bawah)
    if not bawah:
        bawah = [0]*len(atas)
    
    return max(bawah), max(atas)

# Inferensi

inferensi = []
for i in range(len(data)):
    inferensi.append(rules_inferensi(predikat_pelayanan[i], predikat_makanan[i]))

# Aturan untuk Deffuzifikasi

def bawah(x):
    if (0 <= x <= 50):
        return 1
    if (50 < x <= 80):
        return -(x-80)/(80-50)
    else:
        return 0
    
def atas(x):
    if (70 < x < 85):
        return (x-70)/(85-70)
    if (85 <= x <= 100):
        return 1
    else:
        return 0

generated_number = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]
inferensi_hasil = []
for inferensi_temp in inferensi:
    total = 0
    total_temp = 0
    for i in generated_number:
        i_min = min(inferensi_temp[0], bawah(i)), min(inferensi_temp[1], atas(i))
        temp_i = max(i_min[0], i_min[1])
        total = total + (i * temp_i)
        total_temp = total_temp + temp_i
        
    hasil = total / total_temp
    inferensi_hasil.append(hasil)

df = pd.DataFrame(data)
df['Hasil'] = inferensi_hasil
df = df.sort_values(by=['Hasil'], ascending=False).head(10)

df

df.to_excel("Peringkat.xls", index = False)
files.download("Peringkat.xls")
